<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.olympic.order.OrderMapper">
    <!-- 결제 버튼을 눌렀을 때 주문 정보를 ready 상태로 DB에 삽입 -->
    <insert id="insertOrder" parameterType="kr.co.olympic.order.OrderVO">
        INSERT INTO `order` (
            order_no, buy_date, state, member_no,
            item_no, game_id, coupon_no, imp_uid,
            real_price, original_price, point, member_email
        )
        VALUES (
            #{order_no}, NOW(), 'ready', #{member_no}, 
            #{item_no}, #{game_id}, #{coupon_no}, #{imp_uid},
            #{real_price}, #{original_price}, #{point}, #{member_email}
        );
    </insert>
    
    <!-- 매개변수로 받은 OrderVO의 order_no에 해당하는 데이터를 찾아서 전달받은 imp_uid를 삽입  -->
    <insert id="insertUid" parameterType="kr.co.olympic.order.OrderVO">
        UPDATE `order`
        SET imp_uid = #{imp_uid}
        WHERE order_no = #{order_no};
    </insert>
    
    <!-- 새로운 메서드 추가: imp_uid로 주문 정보 가져오기 -->
    <select id="getOrderByImpUid" parameterType="String" resultType="kr.co.olympic.order.OrderVO">
        SELECT *
        FROM `order`
        WHERE imp_uid = #{imp_uid};
    </select>

    <!-- 기존 주문 데이터의 상태를 paid로 업데이트 -->
    <update id="updateOrderStateToPaid" parameterType="kr.co.olympic.order.OrderVO">
        UPDATE `order`
        SET state = 'paid'
        WHERE order_no = #{order_no};
    </update>

    <!-- 주문 정보를 ID로 조회 -->
    <select id="getOrderById" parameterType="String" resultType="kr.co.olympic.order.OrderVO">
        SELECT *
        FROM `order`
        WHERE order_no = #{order_no}
    </select>

    <!-- 특정 회원의 모든 주문 정보 조회 -->
    <select id="getOrdersByMember" parameterType="kr.co.olympic.member.MemberVO" resultType="kr.co.olympic.order.OrderVO">
        SELECT *
        FROM `order`
        WHERE member_no = #{member_no}
    </select>

    <!-- 주문 정보 업데이트 (일반 업데이트) -->
    <update id="updateOrder" parameterType="kr.co.olympic.order.OrderVO">
        UPDATE `order`
        SET buy_date = #{buy_date}, state = #{state}, imp_uid = #{imp_uid},
            real_price = #{real_price}, original_price = #{original_price}, point = #{point}
        WHERE order_no = #{order_no};
    </update>

    <!-- 주문 정보 삭제 -->
    <delete id="deleteOrder" parameterType="String">
        DELETE FROM `order`
        WHERE order_no = #{order_no};
    </delete>
    
    <!-- 페이징 처리된 최신순 주문 내역 조회 -->
    <select id="getOrdersByMemberPaged" parameterType="map" resultType="kr.co.olympic.order.OrderVO">
        SELECT *
        FROM `order`
        WHERE member_no = #{member.member_no}
        ORDER BY buy_date DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>
    
    <!-- 특정 회원의 전체 주문 개수 조회 -->
    <select id="getTotalOrdersByMember" parameterType="kr.co.olympic.member.MemberVO" resultType="int">
        SELECT COUNT(*)
        FROM `order`
        WHERE member_no = #{member_no}
    </select>
    
    <!-- 티켓 정보 삽입 -->
    <insert id="insertTicket" parameterType="kr.co.olympic.order.TicketVO">
        INSERT INTO ticket (
            ticket_no, price, member_no, order_no, cancel_state, seat_info, item_no, game_id
        ) VALUES (
            #{ticket_no}, #{price}, #{member_no}, #{order_no}, 'N', #{seat_info}, #{item_no}, #{game_id}
        );
    </insert>

    <!-- order_no로 티켓 조회 -->
    <select id="getTicketsByOrderNo" parameterType="String" resultType="kr.co.olympic.order.TicketVO">
        SELECT * FROM ticket WHERE order_no = #{order_no};
    </select>
    
    <!-- member_no로 티켓 조회 -->
    <select id="getTicketsByMemberNo" parameterType="kr.co.olympic.member.MemberVO" resultType="kr.co.olympic.order.TicketVO">
        SELECT * FROM ticket WHERE member_no = #{member_no};
    </select>
    
    <!-- coupon_no로 쿠폰의 할인 금액 조회 -->
    <select id="getCouponDiscount" parameterType="String" resultType="int">
        SELECT discount
        FROM coupon
        WHERE coupon_no = #{coupon_no};
    </select>
    
    <!-- coupon_no로 쿠폰조회해서 상태를 used로 변경하기  -->
    <select id="setCouponUsed" parameterType="String">
        UPDATE coupon
        SET used = 1,
        	use_date = NOW()
        WHERE coupon_no = #{coupon_no};
    </select>
    
    <!--유효한 쿠폰 확인-->
	<select id="getPossibleCouponList" resultType="kr.co.olympic.member.CouponVO" parameterType="kr.co.olympic.member.MemberVO">
		SELECT * FROM coupon WHERE member_no=#{member_no} AND used = 0
	</select>
	
	<!-- 모든 쿠폰 확인-->
	<select id="getAllCouponList" resultType="kr.co.olympic.member.CouponVO" parameterType="kr.co.olympic.member.MemberVO">
		SELECT * FROM coupon WHERE member_no=#{member_no}
	</select>
    
    <!-- 포인트 정보를 DB에 삽입 -->
    <insert id="insertPoint" parameterType="kr.co.olympic.order.PointVO">
        INSERT INTO point (
            content, member_no, point, date, is_use
        )
        VALUES (
            #{content}, #{member_no}, #{point}, NOW(), #{isUse}
        );
    </insert>

    <!-- 특정 회원의 포인트 정보를 조회 -->
    <select id="getPointsByMemberNo" parameterType="kr.co.olympic.member.MemberVO" resultType="kr.co.olympic.order.PointVO">
        SELECT *
        FROM point
        WHERE member_no = #{member_no};
    </select>
    
     <!-- 특정 회원의 사용 가능한 포인트 합산 조회 -->
    <select id="getTotalAvailablePoints" parameterType="kr.co.olympic.member.MemberVO" resultType="int">
        SELECT SUM(point)
        FROM point
        WHERE member_no = #{member_no} AND is_use = 0;
    </select>

    <!-- 포인트 정보 업데이트 -->
    <update id="updatePoint" parameterType="kr.co.olympic.order.PointVO">
        UPDATE point
        SET content = #{content}, point = #{point}, date = #{date}, is_use = #{isUse}
        WHERE point_no = #{point_no};
    </update>

    <!-- 포인트 정보 삭제 -->
    <delete id="deletePoint" parameterType="int">
        DELETE FROM point
        WHERE point_no = #{point_no};
    </delete>
</mapper>
